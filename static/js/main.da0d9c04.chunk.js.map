{"version":3,"sources":["Web3Util.js","images/nfts/1.png","images/nfts/2.png","images/nfts/3.png","images/nfts/4.png","images/nfts/5.png","components/RuneImageComponent.js","components/currencyUtils.js","MarketPlaceHome.js","components/MyRunesComponent.js","components/ClaimedRunesComponent.js","MyRunes.js","Details.js","ClaimedRunes.js","RuneDetail.js","RuneDetailTemp.js","More.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","a","window","ethereum","web3","Web3","enable","console","log","process","provider","providers","HttpProvider","getInstance","eth","getAccounts","user","instance","Contract","RunesABI","from","COLOR_ARRAY","ISPROD","RuneImageComponent","props","state","getRuneImage","bind","rune","chosenModel","runeId","Number","parseInt","colorString","height","width","imageEdges","divWidth","undefined","this","isDetail","location","href","indexOf","nft1","nft2","nft3","nft4","nft5","filterString","temp","temp2","style","margin","dangerouslySetInnerHTML","__html","className","src","React","Component","getCurrencyTokenName","networkId","currency","RUNE_PRICES","MarketPlaceHome","componentDidMount","contractInstance","net","getId","setState","hasData","LoadData","message","claimFreeNFT","claimPayedNFT","getClaimRunesComponent","scrollTo","methods","index","call","runeIndex","claimFreeRunes","send","cost","priceInWei","utils","toWei","claimPayedRunes","value","component","push","onClick","runesRemainingToAssign","currencyLocal","marginBottom","target","to","MyRunesComponent","getRunesComponent","myRunes","components","counter","length","runeNumber","display","float","ClaimedRunesComponent","claimedRunes","Details","More","Routes","exact","path","render","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da0d9c04.chunk.js","sourcesContent":["import Web3 from 'web3';\r\n// import MarketPlace from './abi/MarketPlaceMain.json'\r\nimport RunesABI from './abi/CryptoRunes.json'\r\nconst contractAddress = \"0x48581d582fB10EE92BB82fb72d52B921b4CA49d4\"\r\nexport const getWeb3 = () =>\r\n    new Promise(async(resolve, reject) => {\r\n    //window.addEventListener(\"load\", async () => {\r\n    if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n        await window.ethereum.enable();\r\n        resolve(web3);\r\n        } catch (error) {\r\n        reject(error);\r\n        }\r\n    } else if (window.web3) {\r\n        // load metamask provider\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n    } else {\r\n        console.log(process.env.PUBLIC_URL)\r\n        const provider = new Web3.providers.HttpProvider(\"https://api.avax.network/ext/bc/C/rpc\");\r\n\r\n        // test net \r\n        // const provider = new Web3.providers.HttpProvider(\"https://api.avax-test.network/ext/bc/C/rpc\");\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n    }\r\n    //});\r\n});\r\nexport const getInstance = async (web3) => {\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    \r\n    window.instance = new web3.eth.Contract(\r\n        RunesABI,\r\n        contractAddress,\r\n        {\r\n            from: window.user\r\n        }\r\n    );\r\n\r\n    return window.instance;\r\n}","export default __webpack_public_path__ + \"static/media/1.7af21f0f.png\";","export default __webpack_public_path__ + \"static/media/2.d057f409.png\";","export default __webpack_public_path__ + \"static/media/3.02257d75.png\";","export default __webpack_public_path__ + \"static/media/4.0ff827e2.png\";","export default __webpack_public_path__ + \"static/media/5.3261d6de.png\";","import React from 'react';\r\nimport nft1 from '../images/nfts/1.png';\r\nimport nft2 from '../images/nfts/2.png';\r\nimport nft3 from '../images/nfts/3.png';\r\nimport nft4 from '../images/nfts/4.png';\r\nimport nft5 from '../images/nfts/5.png';\r\n\r\nconst COLOR_ARRAY = [\r\n  95,\r\n  162,\r\n  19,\r\n  70,\r\n  213,\r\n  110,\r\n  161,\r\n  316,\r\n  84,\r\n  176,\r\n  189,\r\n  324,\r\n  232,\r\n  231,\r\n  135,\r\n  62,\r\n  304,\r\n  318,\r\n  223,\r\n  127,\r\n  245,\r\n  295,\r\n  97,\r\n  31,\r\n  112,\r\n  146,\r\n  296,\r\n  260,\r\n  302,\r\n  352,\r\n  18,\r\n  274,\r\n  179,\r\n  197,\r\n  108,\r\n  281,\r\n  173,\r\n  343,\r\n  349,\r\n  216,\r\n  132,\r\n  148,\r\n  10,\r\n  222,\r\n  38,\r\n  49,\r\n  285,\r\n  298,\r\n  228,\r\n  94,\r\n  286,\r\n  75,\r\n  51,\r\n  278,\r\n  29,\r\n  306,\r\n  169,\r\n  142,\r\n  315,\r\n  154,\r\n  265,\r\n  244,\r\n  273,\r\n  212,\r\n  77,\r\n  192,\r\n  36,\r\n  226,\r\n  106,\r\n  72,\r\n  16,\r\n  115,\r\n  69,\r\n  172,\r\n  282,\r\n  9,\r\n  32,\r\n  123,\r\n  261,\r\n  323,\r\n  220,\r\n  355,\r\n  113,\r\n  140,\r\n  271,\r\n  184,\r\n  185,\r\n  307,\r\n  360,\r\n  124,\r\n  256,\r\n  143,\r\n  65,\r\n  83,\r\n  46,\r\n  114,\r\n  1,\r\n  168,\r\n  25,\r\n  183,\r\n  326\r\n]\r\n\r\nlet ISPROD = true\r\nclass RuneImageComponent extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      props\r\n    }\r\n    this.getRuneImage = this.getRuneImage.bind(this);\r\n  }\r\n\r\n  getRuneImage(rune){\r\n\r\n    let runeId = Number.parseInt(rune)\r\n    let colorString = \"\"\r\n    let height =\"50\"\r\n    let width = \"auto\"\r\n    let imageEdges = \" image-rendering: pixelated;object-fit: contain;\"\r\n\r\n    let divWidth = \"90px\"\r\n    if(this.props.divWidth != undefined){\r\n      divWidth = this.props.divWidth\r\n    }\r\n\r\n    if(this.props.height != undefined &&\r\n      this.props.width != undefined){\r\n        height = this.props.height \r\n        width = this.props.height \r\n    }\r\n\r\n    if(!this.props.isDetail){\r\n      imageEdges = \"\"\r\n    }\r\n    \r\n  \r\n\r\n    if (window.location.href.indexOf(\"localhost\") != -1){\r\n      ISPROD = false\r\n    }\r\n    \r\n    let chosenModel;\r\n    if(runeId<100){\r\n      chosenModel = nft1\r\n      colorString = COLOR_ARRAY[runeId]\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/1.png\"\r\n      }\r\n    }\r\n    else if(runeId>=100 && runeId<200){\r\n      chosenModel = nft2\r\n      colorString = COLOR_ARRAY[runeId-100]\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/2.png\"\r\n      }\r\n    }else if(runeId>=200 && runeId<300){\r\n      chosenModel = nft3\r\n      colorString = COLOR_ARRAY[runeId-200]\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/3.png\"\r\n      }\r\n    }\r\n    else if(runeId>=300 && runeId<400){\r\n      chosenModel = nft4\r\n      colorString = COLOR_ARRAY[runeId-300]\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/4.png\"\r\n      }\r\n    }\r\n    else if(runeId>=400 && runeId<512){\r\n      chosenModel = nft5\r\n      colorString = COLOR_ARRAY[runeId-400]\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/5.png\"\r\n      }\r\n    }\r\n\r\n\r\n    let filterString = 'filter:hue-rotate('+colorString+'deg);'\r\n    // if dark rune\r\n    if(runeId>=500){\r\n      let temp = 600 - runeId\r\n      let temp2 = temp - 13\r\n      temp = temp *13\r\n      filterString = 'filter:hue-rotate('+COLOR_ARRAY[temp2]+'deg) invert(100%);'\r\n    }\r\n\r\n    // if black and white rune\r\n    if(runeId==500){\r\n      chosenModel = nft1\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/1.png\"\r\n      }\r\n      filterString = 'filter: grayscale(100%)  invert(0%);'\r\n    }\r\n    if(runeId==501){\r\n      chosenModel = nft2\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/2.png\"\r\n      }\r\n      filterString = 'filter: grayscale(100%)  invert(0%);'\r\n    }\r\n    else if(runeId==502){\r\n      chosenModel = nft3\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/3.png\"\r\n      }\r\n      filterString = 'filter: grayscale(100%)  invert(0%);'\r\n    }\r\n\r\n    else if(runeId==503){\r\n      chosenModel = nft4\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/4.png\"\r\n      }\r\n      filterString = 'filter: grayscale(100%)  invert(0%);'\r\n    }\r\n\r\n    else if(runeId==504){\r\n      chosenModel = nft5\r\n      if(ISPROD){\r\n        chosenModel = \"/images/nfts/5.png\"\r\n      }\r\n      filterString = 'filter: grayscale(100%)  invert(0%);'\r\n    }\r\n\r\n    function createMarkup() { return {__html: '<style> .nft'+runeId+'{'+filterString+'image-rendering: auto;image-rendering: crisp-edges;'+imageEdges+' }</style>'}; };\r\n\r\n    return(\r\n      <div style={{width:divWidth,margin:\"auto\"}} >\r\n        <div dangerouslySetInnerHTML={createMarkup()} />\r\n        <img  className={\"nft\"+runeId} src={chosenModel} height={height} width={width} />\r\n      </div>\r\n    ) \r\n  }\r\n\r\n\r\n  render() {\r\n    let runeId = Number.parseInt(this.props.runeId)\r\n\r\n    if (runeId>=0) {\r\n      return (\r\n       this.getRuneImage(runeId)\r\n      );\r\n    } \r\n    \r\n    return null;\r\n\r\n  }\r\n}\r\n\r\nexport default RuneImageComponent;\r\n","function getCurrencyTokenName(networkId){\r\n    let currency = \"\"\r\n    if(networkId ==\"1\"){\r\n      currency = \"$AVAX\"\r\n    }else if(networkId == \"97\" ||networkId == \"56\"){\r\n      currency = \"$BNB\"\r\n    }\r\n    return currency;\r\n}\r\n\r\nexport default getCurrencyTokenName;","import React from 'react';\r\nimport './App.css';\r\nimport { getWeb3, getInstance}  from \"./Web3Util\";\r\nimport { Link} from \"react-router-dom\";\r\nimport RuneImageComponent from \"./components/RuneImageComponent\"\r\nimport getCurrencyTokenName from \"./components/currencyUtils\"\r\n\r\nconst TOTAL_SUPPLY = 511\r\nconst RUNE_PRICES = [0,0.75,1.5,3,6,12]\r\n\r\nclass MarketPlaceHome extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasData: false,\r\n      message: \"\",\r\n      user: '',\r\n      contractInstance: '',\r\n      user:'',\r\n      networkId:\"\",\r\n      runesRemainingToAssign:-1,\r\n      runeIndex:0,\r\n      myRunes:[]\r\n    };\r\n    this.LoadData = this.LoadData.bind(this);\r\n    this.claimFreeNFT = this.claimFreeNFT.bind(this);\r\n    this.claimPayedNFT = this.claimPayedNFT.bind(this);\r\n    this.getClaimRunesComponent = this.getClaimRunesComponent.bind(this);\r\n  }\r\n  componentWillUnmount(){\r\n    window.scrollTo(0, 0);\r\n  }\r\n  componentDidMount = async () => {\r\n    const web3 = await getWeb3();\r\n    window.web3 = web3;\r\n    const contractInstance = await getInstance(web3);\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    const networkId = await web3.eth.net.getId();\r\n    this.setState({ user: window.user,hasData:true,contractInstance,networkId });\r\n    \r\n    await this.LoadData(web3);\r\n\r\n  }\r\n  async LoadData() {\r\n      try {\r\n\r\n       const runeIndex = await this.state.contractInstance.methods.index().call();\r\n\r\n        this.setState({\r\n          runeIndex\r\n        })\r\n    } catch (e) {console.log('Error', e)}\r\n    finally{\r\n      this.setState({hasData:true})\r\n    }\r\n  \r\n  }\r\n  async claimFreeNFT() {\r\n    try {\r\n      await this.state.contractInstance.methods.claimFreeRunes().send()\r\n      await this.LoadData(window.web3);\r\n    } catch (e) {console.log('Error', e)}\r\n  };\r\n\r\n  async claimPayedNFT(cost) {\r\n    try {\r\n     const priceInWei =  window.web3.utils.toWei(cost, 'ether');\r\n     await this.state.contractInstance.methods.claimPayedRunes().send(\r\n      { value:priceInWei}\r\n     )\r\n      await this.LoadData(window.web3);\r\n    } catch (e) {console.log('Error', e)}\r\n  };\r\n\r\n  getClaimRunesComponent(){\r\n    let component = []\r\n\r\n    let networkId = this.state.networkId\r\n    let currency = getCurrencyTokenName(networkId)\r\n\r\n\r\n    if(this.state.runeIndex<TOTAL_SUPPLY){\r\n      if(this.state.runeIndex<200 &&this.state.runeIndex>= 100){\r\n        component.push(\r\n          <a href=\"#\"  onClick={()=>{this.claimPayedNFT(\"0.75\")}}>\r\n            Claim your rune for {RUNE_PRICES[1]} {currency}\r\n          </a>\r\n        )\r\n      }else if(this.state.runeIndex<300 &&this.state.runeIndex>= 200){\r\n        component.push(\r\n          <a href=\"#\"  onClick={()=>{this.claimPayedNFT(\"1.5\")}}>\r\n            Claim your rune for {RUNE_PRICES[2]} {currency}\r\n          </a>\r\n        )\r\n      }else if(this.state.runeIndex<400 &&this.state.runeIndex>= 300){\r\n        component.push(\r\n          <a href=\"#\" onClick={()=>{this.claimPayedNFT(\"3\")}}>\r\n            Claim your rune for {RUNE_PRICES[3]} {currency}\r\n          </a>\r\n        )\r\n      }else if(this.state.runeIndex<500 &&this.state.runeIndex>= 400){\r\n        component.push(\r\n          <a href=\"#\" onClick={()=>{this.claimPayedNFT(\"6\")}}>\r\n            Claim your rune for {RUNE_PRICES[4]} {currency}\r\n          </a>\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n    return component;\r\n  }\r\n\r\n  render() {\r\n    let tempId = 500-this.state.runesRemainingToAssign\r\n    if (this.state.hasData) {\r\n      let currencyLocal = getCurrencyTokenName(this.state.networkId)\r\n      return (\r\n        <div className=\"App\"   >\r\n          <section >\r\n            <div >\r\n              <div>\r\n           \r\n              <br/>\r\n      <h1>Runes to be claimed: {501 - this.state.runeIndex}</h1>\r\n              <br/>\r\n              {currencyLocal == \"\"?\r\n              <div style={{marginBottom:\"-185px\"}}>\r\n              <h2>\r\n                You're not connected to Avalanche\r\n              </h2>\r\n          <a href=\"https://docs.avax.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask\" target=\"_blank\">Guide: How to change Metamask Network to Avalanche C-Chain Mainnet.</a><br/>\r\n          <a href=\"https://docs.avax.network/build/tutorials/platform/transfer-avax-between-x-chain-and-c-chain\" target=\"_blank\">Need help transferring $AVAX to Metamask?</a><br/>\r\n              </div>\r\n              :\r\n              null\r\n              }\r\n              \r\n\r\n\r\n              {(this.state.runeIndex <500 )&& (this.state.runeIndex >=0)?\r\n              \r\n              <div>\r\n                <h2>Rune recently claimed: </h2><br/>\r\n               <a href={\"https://app.nftrade.com/assets/avalanche/0x48581d582fb10ee92bb82fb72d52b921b4ca49d4/\"+(this.state.runeIndex-1)} target=\"_blank\"> <img src={\"https://ipfs.io/ipfs/QmTDxBEYt75r61FJDkPok32CncT2M8dsEqLD6hGocdT3ub/rune\"+(this.state.runeIndex-1)+\".png\"}  height={\"250\"} width={\"auto\"} /></a>\r\n               {/* <Link to={\"/rune/\"+tempId} > <RuneImageComponent isDetail={true} runeId={tempId} divWidth={\"225px\"} height={\"250\"} width={\"auto\"} /> </Link>\r\n            */} \r\n              </div>\r\n              \r\n              :  \r\n                null\r\n              \r\n              }\r\n              \r\n\r\n\r\n              {window.user != undefined ? this.getClaimRunesComponent():\r\n              \r\n              <>\r\n               <h3>You need Metamask to be able to use this site.</h3>\r\n          <a href=\"https://docs.avax.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask\" target=\"_blank\">Guide: How to change Metamask Network to Avalanche C-Chain Mainnet.</a><br/>\r\n          <a href=\"https://docs.avax.network/build/tutorials/platform/transfer-avax-between-x-chain-and-c-chain\" target=\"_blank\">Need help transferring $AVAX to Metamask?</a><br/>\r\n\r\n              </>}\r\n          \r\n          {/** \r\n              <br /> <br /> <br />\r\n              Go to <Link to=\"/myRunes\" >my runes ({this.state.myRunes.length}) </Link>page\r\n\r\n              <br />\r\n\r\n              Go to <Link to=\"/claimed\" >claimed runes ({511 - this.state.runesRemainingToAssign}) </Link>page\r\n              */}\r\n              <br />\r\n              <br />\r\n\r\n              Go to <Link to=\"/details\" >details</Link> page\r\n              </div>\r\n              <br />\r\n\r\n              View collection on  <a href=\"https://app.nftrade.com/assets/avalanche/0x48581d582fb10ee92bb82fb72d52b921b4ca49d4\" target=\"_blank\" >NFTrade</a> \r\n              \r\n\r\n              \r\n              </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\" >\r\n          <section >\r\n          <div className=\"sk-folding-cube\">\r\n  <div className=\"sk-cube1 sk-cube\"></div>\r\n  <div className=\"sk-cube2 sk-cube\"></div>\r\n  <div className=\"sk-cube4 sk-cube\"></div>\r\n  <div className=\"sk-cube3 sk-cube\"></div>\r\n</div>\r\n          </section>\r\n          <h2>\r\n                Crypto Runes for Avalanche\r\n              </h2>\r\n          <h3>You need Metamask to be able to use this site.</h3>\r\n          <a href=\"https://docs.avax.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask\" target=\"_blank\">Guide: How to change Metamask Network to Avalanche C-Chain Mainnet.</a><br/>\r\n          <a href=\"https://docs.avax.network/build/tutorials/platform/transfer-avax-between-x-chain-and-c-chain\" target=\"_blank\">Need help transferring $AVAX to Metamask?</a><br/>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default MarketPlaceHome;\r\n","import React from 'react';\r\nimport { Link} from \"react-router-dom\";\r\nimport RuneImageComponent from \"./RuneImageComponent\"\r\n\r\nclass MyRunesComponent extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      props\r\n    }\r\n    this.getRunesComponent = this.getRunesComponent.bind(this);\r\n  }\r\n\r\n  getRunesComponent(myRunes){\r\n    let components = []\r\n\r\n    \r\n    for(let counter=0;counter<myRunes.length;++counter){\r\n      let runeNumber = Number.parseInt(myRunes[counter]) \r\n        components.push(\r\n            <Link to={\"/rune/\"+myRunes[counter]} style={{display:\"table\",float:\"left\",margin:\"15px\",width:\"90px\"}}>\r\n              <RuneImageComponent isDetail={false}  runeId={myRunes[counter]} />\r\n              <br />\r\n               Rune <br/>#{runeNumber}\r\n            </Link>\r\n        )\r\n    }\r\n\r\n    return components\r\n  }\r\n\r\n  render() {\r\n    if (this.props.myRunes.length >0) {\r\n      return (\r\n        <div    >\r\n          <section >\r\n            <div >\r\n                <div className=\"rune-list\"  style={{margin:\"auto\",width:\"500px\"}}>\r\n                {this.getRunesComponent(this.props.myRunes)}\r\n                </div>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } \r\n    \r\n    return null;\r\n\r\n  }\r\n}\r\n\r\nexport default MyRunesComponent;\r\n","import React from 'react';\r\n\r\nimport RuneImageComponent from \"./RuneImageComponent\"\r\nimport { Link} from \"react-router-dom\";\r\n\r\nclass ClaimedRunesComponent extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      props\r\n    }\r\n    this.getRunesComponent = this.getRunesComponent.bind(this);\r\n  }\r\n\r\n  getRunesComponent(runesRemainingToAssign){\r\n    let components = []\r\n    let claimedRunes = 511- runesRemainingToAssign\r\n    for(let counter=0;counter<claimedRunes;++counter){\r\n        components.push(\r\n            <Link to={\"/rune/\"+counter} style={{display:\"table\",float:\"left\",margin:\"15px\",width:\"90px\"}}>\r\n              <RuneImageComponent isDetail={false}  runeId={counter} />\r\n              <br />\r\n               Rune<br/> #{counter}\r\n            </Link>\r\n        )\r\n    }\r\n\r\n    return components\r\n  }\r\n\r\n  render() {\r\n    if (this.props.runesRemainingToAssign >=0) {\r\n      return (\r\n        <div    >\r\n          <section >\r\n            <div >\r\n                <h1>Claimed runes ({511 - this.props.runesRemainingToAssign})</h1>\r\n                \r\n                <div className=\"rune-list\" style={{margin:\"auto\",width:\"500px\"}}>\r\n                {this.getRunesComponent(this.props.runesRemainingToAssign)}\r\n                </div>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else{\r\n      return <> No Runes were claimed</>\r\n    }\r\n    \r\n    return null;\r\n\r\n  }\r\n}\r\n\r\nexport default ClaimedRunesComponent;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { getWeb3, getInstance}  from \"./Web3Util\";\r\nimport MyRunesComponent from \"./components/MyRunesComponent\";\r\nimport { Link} from \"react-router-dom\";\r\n\r\nclass MyRunes extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasData: false,\r\n      message: \"\",\r\n      user: '',\r\n      contractInstance: '',\r\n      user:'',\r\n      networkId:\"\",\r\n      runesRemainingToAssign:0,\r\n      myRuneCounter:0,\r\n      myRunes:[]\r\n    };\r\n    this.LoadData = this.LoadData.bind(this);\r\n  }\r\n  componentWillUnmount(){\r\n    window.scrollTo(0, 0);\r\n  }\r\n  componentDidMount = async () => {\r\n    const web3 = await getWeb3();\r\n    window.web3 = web3;\r\n    const contractInstance = await getInstance(web3);\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    const networkId = await web3.eth.net.getId();\r\n    this.setState({ user: window.user,hasData:true,contractInstance,networkId });\r\n    \r\n    await this.LoadData(web3);\r\n\r\n  }\r\n  async LoadData() {\r\n      try {\r\n\r\n       const runesRemainingToAssign = await this.state.contractInstance.methods.runesRemainingToAssign().call();\r\n       const myRuneCounter = await this.state.contractInstance.methods.balanceOf(this.state.user).call();\r\n       const myRunes = await this.state.contractInstance.methods.getAllRunesAtAddress(this.state.user).call();\r\n       \r\n        this.setState({\r\n          runesRemainingToAssign,\r\n          myRuneCounter,\r\n          myRunes\r\n        })\r\n    } catch (e) {console.log('Error', e)}\r\n  \r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasData && this.state.myRunes.length>=0) {\r\n      return (\r\n        <div className=\"App\"   >\r\n          <section >\r\n            <div >\r\n              <div>\r\n              <h1>My runes ({this.state.myRunes.length})</h1>\r\n           \r\n              <br/>\r\n\r\n              <div>\r\n              <MyRunesComponent myRunes={this.state.myRunes} />\r\n\r\n              </div>\r\n            \r\n              <br/><br/><br/>\r\n              <div style={{textAlign:\"center\",width:\"100vw\",float:\"left\"}}>\r\n                <Link to=\"/\">go back to homepage</Link>\r\n              </div>\r\n\r\n\r\n              </div>\r\n              </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\" >\r\n          <section >\r\n          <div className=\"sk-folding-cube\">\r\n  <div className=\"sk-cube1 sk-cube\"></div>\r\n  <div className=\"sk-cube2 sk-cube\"></div>\r\n  <div className=\"sk-cube4 sk-cube\"></div>\r\n  <div className=\"sk-cube3 sk-cube\"></div>\r\n</div>\r\n          </section>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default MyRunes;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Link} from \"react-router-dom\";\r\n\r\n\r\nclass Details extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasData: false,\r\n      message: \"\",\r\n      user: '',\r\n      contractInstance: '',\r\n      user:'',\r\n      networkId:\"\",\r\n      runesRemainingToAssign:0,\r\n      myRuneCounter:0,\r\n      myRunes:[]\r\n    };\r\n  }\r\n\r\n  componentWillMount(){\r\n    this.setState({\r\n      hasData:true\r\n    })\r\n  }\r\n  componentWillUnmount(){\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    if (this.state.hasData) {\r\n      return (\r\n        <div className=\"App\"   >\r\n          <section >\r\n            <div >\r\n              <div>\r\n              <h1>\r\n                About Crypto Runes\r\n              </h1>\r\n           \r\n              <br />\r\n              Claim your Rune NFT on Avalanche. <br/>\r\n              <br/>\r\n              <h2>There are 6 tiers of runes:</h2>\r\n              <br/>\r\n              {/** <br /><br/><br/>\r\n              <h2>Rune prices:</h2><br/><br/>*/}\r\n              Tier 1 - the first one hundred NFTs: are free (only pays gas fees)<br/><br/>\r\n              Tier 2 - the following one hundred NFTs: 0.75 $AVAX<br/><br/>\r\n              Tier 3 - the following one hundred NFTs: 1.5 $AVAX<br/><br/>\r\n              Tier 4 - the following one hundred NFTs: 3 $AVAX<br/><br/>\r\n              Tier 5 - the following one hundred NFTs: 6 $AVAX<br/><br/>\r\n              Contract <Link to=\"/more\">updated!</Link> \r\n              <br />\r\n            \r\n              <br/>\r\n              Go back to the <Link to=\"/\">homepage</Link>\r\n              </div>\r\n              </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\" >\r\n          <section >\r\n          <div className=\"sk-folding-cube\">\r\n  <div className=\"sk-cube1 sk-cube\"></div>\r\n  <div className=\"sk-cube2 sk-cube\"></div>\r\n  <div className=\"sk-cube4 sk-cube\"></div>\r\n  <div className=\"sk-cube3 sk-cube\"></div>\r\n</div>\r\n          </section>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default Details;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { getWeb3, getInstance}  from \"./Web3Util\";\r\nimport ClaimedRunesComponent from \"./components/ClaimedRunesComponent\";\r\n\r\nimport { Link} from \"react-router-dom\";\r\n\r\nclass ClaimedRunes extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasData: false,\r\n      message: \"\",\r\n      user: '',\r\n      contractInstance: '',\r\n      user:'',\r\n      networkId:\"\",\r\n      runesRemainingToAssign:-1,\r\n      myRuneCounter:0,\r\n      myRunes:[]\r\n    };\r\n    this.LoadData = this.LoadData.bind(this);\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    const web3 = await getWeb3();\r\n    window.web3 = web3;\r\n    const contractInstance = await getInstance(web3);\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    const networkId = await web3.eth.net.getId();\r\n    this.setState({ user: window.user,hasData:true,contractInstance,networkId });\r\n    \r\n    await this.LoadData(web3);\r\n\r\n  }\r\n  async LoadData() {\r\n      try {\r\n\r\n       const runesRemainingToAssign = await this.state.contractInstance.methods.runesRemainingToAssign().call();\r\n       const myRuneCounter = await this.state.contractInstance.methods.balanceOf(this.state.user).call();\r\n       const myRunes = await this.state.contractInstance.methods.getAllRunesAtAddress(this.state.user).call();\r\n       \r\n        this.setState({\r\n          runesRemainingToAssign,\r\n          myRuneCounter,\r\n          myRunes\r\n        })\r\n    } catch (e) {console.log('Error', e)}\r\n  \r\n  }\r\n  componentWillUnmount(){\r\n    window.scrollTo(0, 0);\r\n  }\r\n  render() {\r\n    if (this.state.hasData && this.state.runesRemainingToAssign>=0) {\r\n      return (\r\n        <div className=\"App\">\r\n          <section >\r\n            <div >\r\n              <div>\r\n\r\n              <br/>\r\n              <ClaimedRunesComponent runesRemainingToAssign={this.state.runesRemainingToAssign} />\r\n              <br/><br/><br/>\r\n              <div style={{textAlign:\"center\",width:\"100vw\",float:\"left\"}}>\r\n                <Link to=\"/\">go back to homepage</Link>\r\n              </div>\r\n\r\n\r\n              </div>\r\n              </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\" >\r\n          <section >\r\n          <div className=\"sk-folding-cube\">\r\n              <div className=\"sk-cube1 sk-cube\"></div>\r\n              <div className=\"sk-cube2 sk-cube\"></div>\r\n              <div className=\"sk-cube4 sk-cube\"></div>\r\n              <div className=\"sk-cube3 sk-cube\"></div>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default ClaimedRunes;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Link} from \"react-router-dom\";\r\n\r\nimport { getWeb3, getInstance}  from \"./Web3Util\";\r\nimport getCurrencyTokenName from \"./components/currencyUtils\"\r\n\r\nimport RuneImageComponent from \"./components/RuneImageComponent\"\r\n\r\n\r\nclass RuneDetail extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasData: false,\r\n      message: \"\",\r\n      user: '',\r\n      contractInstance: '',\r\n      user:'',\r\n      networkId:\"\",\r\n      runesRemainingToAssign:0,\r\n      myRuneCounter:0,\r\n      myRunes:[],\r\n      runeOwner:\"\",\r\n      runePrice:0,\r\n      runeForSale:null,\r\n      bids:\"\",\r\n      runeRecipientAddress:\"\"\r\n    };\r\n    this.LoadData = this.LoadData.bind(this);\r\n    this.getClaimPrice= this.getClaimPrice.bind(this);\r\n    this.getTransferRuneComponenet = this.getTransferRuneComponenet.bind(this);\r\n    this.changeRuneRecipientValue = this.changeRuneRecipientValue.bind(this);\r\n    this.sendToAddress = this.sendToAddress.bind(this);\r\n  }\r\n\r\n  componentDidUpdate = async () => {\r\n    const web3 = await getWeb3();\r\n \r\n    \r\n    await this.LoadData(web3);\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    const web3 = await getWeb3();\r\n    window.web3 = web3;\r\n    const contractInstance = await getInstance(web3);\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    const networkId = await web3.eth.net.getId();\r\n    this.setState({ user: window.user,hasData:true,contractInstance,networkId,runeOwner:\"\"});\r\n    \r\n    await this.LoadData(web3);\r\n\r\n  }\r\n  async LoadData() {\r\n      try {\r\n\r\n       const runesRemainingToAssign = await this.state.contractInstance.methods.runesRemainingToAssign().call();\r\n       const myRuneCounter = await this.state.contractInstance.methods.balanceOf(this.state.user).call();\r\n       const myRunes = await this.state.contractInstance.methods.getAllRunesAtAddress(this.state.user).call();\r\n       const runeOwner = await this.state.contractInstance.methods.runeIndexToAddress(this.props.match.params.runeId).call();\r\n       const runeForSale =   await this.state.contractInstance.methods.runesOfferedForSale(this.props.match.params.runeId).call();\r\n      const bids = await this.state.contractInstance.methods.runeBids(this.props.match.params.runeId).call();\r\n       /**\r\n         * runeForSale\r\n         * \r\n        {0: true, \r\n        1: \"108\", \r\n        2: \"0xF21EA9B94Bcc918b338116cCB66439b09BF69447\",\r\n         3: \"1100000000000000000\", \r\n         4: \"0x0000000000000000000000000000000000000000\",\r\n          isForSale: true, \r\n          runeIndex: \"108\",\r\n           seller: \"0xF21EA9B94Bcc918b338116cCB66439b09BF69447\", \r\n           minValue: \"1100000000000000000\", \r\n           onlySellTo: \"0x0000000000000000000000000000000000000000\"}\r\n\r\n         */\r\n        this.setState({\r\n          runesRemainingToAssign,\r\n          myRuneCounter,\r\n          myRunes,\r\n          runeOwner,\r\n          runeForSale,\r\n          bids\r\n        })\r\n    } catch (e) {console.log('Error', e)}\r\n  \r\n  }\r\n  componentWillUnmount(){\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  getClaimPrice(runeId){\r\n    let prices = [0,0.75,1.5,3,6,12]\r\n    let priceString = \"\"\r\n    if(runeId>= 0 && runeId<100){\r\n      priceString = \"Rune claim price: \"+prices[0]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 100 && runeId<200){\r\n      priceString = \"Rune claim price: \"+prices[1]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 200 && runeId<300){\r\n      priceString = \"Rune claim price: \"+prices[2]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 300 && runeId<400){\r\n      priceString = \"Rune claim price: \"+prices[3]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 400 && runeId<500){\r\n      priceString = \"Rune claim price: \"+prices[4]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 500 && runeId<=511){\r\n      priceString = \"Rune claim price: \"+prices[5]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n\r\n    return priceString\r\n  }\r\n\r\n  getRuneNextComponents(runeId){\r\n    let component =[]\r\n    let tempId = Number.parseInt(runeId)\r\n\r\n    if(runeId<=511 && runeId>0){\r\n      let tempPrevious = tempId-1\r\n      component.push(\r\n        <Link to={\"/rune/\"+tempPrevious}>\r\n          Previous rune\r\n        </Link>\r\n      )\r\n      component.push(<>&nbsp;&nbsp;&nbsp;</>)\r\n    }\r\n\r\n    if(runeId>=0 && runeId<511){\r\n      let tempNext= tempId+1\r\n      component.push(\r\n        <Link to={\"/rune/\"+tempNext}>\r\n          Next rune\r\n        </Link>\r\n      )\r\n    }\r\n    return (\r\n\r\n      <div>\r\n        {component}\r\n      </div>\r\n    ) \r\n   }\r\n\r\n\r\n  changeRuneRecipientValue(event){\r\n    \r\n    this.setState({\r\n      runeRecipientAddress:event.target.value\r\n    })\r\n  }\r\n\r\n  async sendToAddress(){\r\n    try {\r\n      const runeForSale = await this.state.contractInstance.methods.transferRune(this.state.runeRecipientAddress,this.props.match.params.runeId).send();\r\n      this.setState({\r\n        runeForSale\r\n      })\r\n  } catch (e) {console.log('Error', e)}\r\n  }\r\n\r\n  getTransferRuneComponenet(){\r\n    return(\r\n      <div>\r\n      \r\n      <br />\r\n      <input className=\"reciever-input\" placeholder={\"Enter the reciever address\"} style={{width:\"450px\"}} onChange={this.changeRuneRecipientValue}/>\r\n      <br />\r\n      {this.state.runeRecipientAddress.length >0 ?\r\n\r\n      <button className=\"button-confirm\" onClick={this.sendToAddress}>Confirm</button>\r\n      : null\r\n      }\r\n        <br />\r\n      <br />\r\n      <br/>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasData) {\r\n      let tempId =  this.props.match.params.runeId -510\r\n      let localRuneId = Number.parseInt(this.props.match.params.runeId)\r\n      if(tempId<0){\r\n        tempId = tempId*(-1)\r\n      }\r\n      return (\r\n        <div className=\"App\"   >\r\n          <section >\r\n            <div >\r\n              <div>\r\n              <h1>\r\n                Rune ID: {localRuneId}\r\n              </h1>\r\n              Rune owner: <span className=\"user-address\">{this.state.runeOwner}</span>\r\n\r\n{/** \r\n              {this.state.runesRemainingToAssign <= tempId?\r\n              <>\r\n                Rune owner: <span className=\"user-address\">{this.state.runeOwner}</span>\r\n              </>\r\n              :\r\n              <div>\r\n              \r\n              </div>\r\n              }*/}\r\n              {this.props.match.params.runeId<=511?\r\n                 \r\n                 <>\r\n                <RuneImageComponent isDetail={true} runeId={this.props.match.params.runeId} divWidth={\"225px\"} height={\"250\"} width={\"auto\"} />\r\n               \r\n                {/*this.getClaimPrice(this.props.match.params.runeId)*/}\r\n\r\n             \r\n                {this.state.runesRemainingToAssign <= tempId?\r\n                              \r\n                              null:\r\n                              <div>\r\n                              Rune not yet claimed\r\n                              </div>\r\n                              }\r\n                 </>\r\n               :<>Nothing here</>}\r\n               {this.getRuneNextComponents(this.props.match.params.runeId)} \r\n\r\n             <br/>\r\n             \r\n{this.state.runeOwner ==this.state.user?\r\nthis.getTransferRuneComponenet():\r\nnull }\r\n             <br/><br/><br/>\r\n              <Link to=\"/\">go back to the homepage</Link>\r\n              </div>\r\n              </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\" >\r\n          <section >\r\n          <div className=\"sk-folding-cube\">\r\n  <div className=\"sk-cube1 sk-cube\"></div>\r\n  <div className=\"sk-cube2 sk-cube\"></div>\r\n  <div className=\"sk-cube4 sk-cube\"></div>\r\n  <div className=\"sk-cube3 sk-cube\"></div>\r\n</div>          </section>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default RuneDetail;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Link} from \"react-router-dom\";\r\n\r\nimport { getWeb3, getInstance}  from \"./Web3Util\";\r\nimport getCurrencyTokenName from \"./components/currencyUtils\"\r\n\r\nimport RuneImageComponent from \"./components/RuneImageComponent\"\r\n\r\n\r\nclass RuneDetail extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasData: false,\r\n      message: \"\",\r\n      user: '',\r\n      contractInstance: '',\r\n      user:'',\r\n      networkId:\"\",\r\n      runesRemainingToAssign:0,\r\n      myRuneCounter:0,\r\n      myRunes:[],\r\n      runeOwner:\"\",\r\n      runePrice:0,\r\n      runeForSale:null,\r\n      bids:\"\",\r\n      runeRecipientAddress:\"\"\r\n    };\r\n    this.LoadData = this.LoadData.bind(this);\r\n    this.getClaimPrice= this.getClaimPrice.bind(this);\r\n    this.getTransferRuneComponenet = this.getTransferRuneComponenet.bind(this);\r\n    this.changeRuneRecipientValue = this.changeRuneRecipientValue.bind(this);\r\n    this.sendToAddress = this.sendToAddress.bind(this);\r\n  }\r\n\r\n  componentDidUpdate = async () => {\r\n    const web3 = await getWeb3();\r\n \r\n    \r\n    await this.LoadData(web3);\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    const web3 = await getWeb3();\r\n    window.web3 = web3;\r\n    const contractInstance = await getInstance(web3);\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    const networkId = await web3.eth.net.getId();\r\n    this.setState({ user: window.user,hasData:true,contractInstance,networkId,runeOwner:\"\"});\r\n    \r\n    await this.LoadData(web3);\r\n\r\n  }\r\n  async LoadData() {\r\n      try {\r\n\r\n       const runesRemainingToAssign = await this.state.contractInstance.methods.runesRemainingToAssign().call();\r\n       const myRuneCounter = await this.state.contractInstance.methods.balanceOf(this.state.user).call();\r\n       const myRunes = await this.state.contractInstance.methods.getAllRunesAtAddress(this.state.user).call();\r\n       let counterRunes = 156\r\n       let runesArray = []\r\n       for(let counter=0;counter<counterRunes;++counter){\r\n        const tempOwner = await this.state.contractInstance.methods.runeIndexToAddress(counter).call();\r\n        runesArray.push(tempOwner)\r\n       }\r\n       console.log(\"@@@ runesArray\",runesArray)\r\n       console.log(\"@@@ runesArray string\",JSON.stringify(runesArray))\r\n\r\n       const runeOwner = await this.state.contractInstance.methods.runeIndexToAddress(this.props.match.params.runeId).call();\r\n       const runeForSale =   await this.state.contractInstance.methods.runesOfferedForSale(this.props.match.params.runeId).call();\r\n      const bids = await this.state.contractInstance.methods.runeBids(this.props.match.params.runeId).call();\r\n       /**\r\n         * runeForSale\r\n         * \r\n        {0: true, \r\n        1: \"108\", \r\n        2: \"0xF21EA9B94Bcc918b338116cCB66439b09BF69447\",\r\n         3: \"1100000000000000000\", \r\n         4: \"0x0000000000000000000000000000000000000000\",\r\n          isForSale: true, \r\n          runeIndex: \"108\",\r\n           seller: \"0xF21EA9B94Bcc918b338116cCB66439b09BF69447\", \r\n           minValue: \"1100000000000000000\", \r\n           onlySellTo: \"0x0000000000000000000000000000000000000000\"}\r\n\r\n         */\r\n        this.setState({\r\n          runesRemainingToAssign,\r\n          myRuneCounter,\r\n          myRunes,\r\n          runeOwner,\r\n          runeForSale,\r\n          bids\r\n        })\r\n    } catch (e) {console.log('Error', e)}\r\n  \r\n  }\r\n  componentWillUnmount(){\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  getClaimPrice(runeId){\r\n    let prices = [0,0.75,1.5,3,6,12]\r\n    let priceString = \"\"\r\n    if(runeId>= 0 && runeId<100){\r\n      priceString = \"Rune claim price: \"+prices[0]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 100 && runeId<200){\r\n      priceString = \"Rune claim price: \"+prices[1]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 200 && runeId<300){\r\n      priceString = \"Rune claim price: \"+prices[2]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 300 && runeId<400){\r\n      priceString = \"Rune claim price: \"+prices[3]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 400 && runeId<500){\r\n      priceString = \"Rune claim price: \"+prices[4]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n    else if(runeId>= 500 && runeId<=511){\r\n      priceString = \"Rune claim price: \"+prices[5]+\" \"+getCurrencyTokenName(this.state.networkId)\r\n    }\r\n\r\n    return priceString\r\n  }\r\n\r\n  getRuneNextComponents(runeId){\r\n    let component =[]\r\n    let tempId = Number.parseInt(runeId)\r\n\r\n    if(runeId<=511 && runeId>0){\r\n      let tempPrevious = tempId-1\r\n      component.push(\r\n        <Link to={\"/rune/\"+tempPrevious}>\r\n          Previous rune\r\n        </Link>\r\n      )\r\n      component.push(<>&nbsp;&nbsp;&nbsp;</>)\r\n    }\r\n\r\n    if(runeId>=0 && runeId<511){\r\n      let tempNext= tempId+1\r\n      component.push(\r\n        <Link to={\"/rune/\"+tempNext}>\r\n          Next rune\r\n        </Link>\r\n      )\r\n    }\r\n    return (\r\n\r\n      <div>\r\n        {component}\r\n      </div>\r\n    ) \r\n   }\r\n\r\n\r\n  changeRuneRecipientValue(event){\r\n    \r\n    this.setState({\r\n      runeRecipientAddress:event.target.value\r\n    })\r\n  }\r\n\r\n  async sendToAddress(){\r\n    try {\r\n      const runeForSale = await this.state.contractInstance.methods.transferRune(this.state.runeRecipientAddress,this.props.match.params.runeId).send();\r\n      this.setState({\r\n        runeForSale\r\n      })\r\n  } catch (e) {console.log('Error', e)}\r\n  }\r\n\r\n  getTransferRuneComponenet(){\r\n    return(\r\n      <div>\r\n      \r\n      <br />\r\n      <input className=\"reciever-input\" placeholder={\"Enter the reciever address\"} style={{width:\"450px\"}} onChange={this.changeRuneRecipientValue}/>\r\n      <br />\r\n      {this.state.runeRecipientAddress.length >0 ?\r\n\r\n      <button className=\"button-confirm\" onClick={this.sendToAddress}>Confirm</button>\r\n      : null\r\n      }\r\n        <br />\r\n      <br />\r\n      <br/>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasData) {\r\n      let tempId =  this.props.match.params.runeId -510\r\n      let localRuneId = Number.parseInt(this.props.match.params.runeId)\r\n      if(tempId<0){\r\n        tempId = tempId*(-1)\r\n      }\r\n      return (\r\n        <div className=\"App\"   >\r\n          <section >\r\n            <div >\r\n              <div>\r\n              <h1>\r\n                Rune ID: {localRuneId}\r\n              </h1>\r\n              Rune owner: <span className=\"user-address\">{this.state.runeOwner}</span>\r\n\r\n{/** \r\n              {this.state.runesRemainingToAssign <= tempId?\r\n              <>\r\n                Rune owner: <span className=\"user-address\">{this.state.runeOwner}</span>\r\n              </>\r\n              :\r\n              <div>\r\n              \r\n              </div>\r\n              }*/}\r\n              {this.props.match.params.runeId<=511?\r\n                 \r\n                 <>\r\n                <RuneImageComponent isDetail={true} runeId={this.props.match.params.runeId} divWidth={\"225px\"} height={\"250\"} width={\"auto\"} />\r\n               \r\n                {/*this.getClaimPrice(this.props.match.params.runeId)*/}\r\n\r\n             \r\n                {this.state.runesRemainingToAssign <= tempId?\r\n                              \r\n                              null:\r\n                              <div>\r\n                              Rune not yet claimed\r\n                              </div>\r\n                              }\r\n                 </>\r\n               :<>Nothing here</>}\r\n               {this.getRuneNextComponents(this.props.match.params.runeId)} \r\n\r\n             <br/>\r\n             \r\n{this.state.runeOwner ==this.state.user?\r\nthis.getTransferRuneComponenet():\r\nnull }\r\n             <br/><br/><br/>\r\n              <Link to=\"/\">go back to the homepage</Link>\r\n              </div>\r\n              </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\" >\r\n          <section >\r\n          <div className=\"sk-folding-cube\">\r\n  <div className=\"sk-cube1 sk-cube\"></div>\r\n  <div className=\"sk-cube2 sk-cube\"></div>\r\n  <div className=\"sk-cube4 sk-cube\"></div>\r\n  <div className=\"sk-cube3 sk-cube\"></div>\r\n</div>          </section>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default RuneDetail;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Link} from \"react-router-dom\";\r\n\r\n\r\nclass More extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasData: false,\r\n      message: \"\",\r\n      user: '',\r\n      contractInstance: '',\r\n      user:'',\r\n      networkId:\"\",\r\n      runesRemainingToAssign:0,\r\n      myRuneCounter:0,\r\n      myRunes:[]\r\n    };\r\n  }\r\n\r\n  componentWillMount(){\r\n    this.setState({\r\n      hasData:true\r\n    })\r\n  }\r\n  componentWillUnmount(){\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    if (this.state.hasData) {\r\n      return (\r\n        <div className=\"App\"   >\r\n          <section >\r\n            <div >\r\n              <div>\r\n              <h1>\r\n                Contract updated\r\n              </h1>\r\n              <p>\r\n                The first version of the contract didn't follow the ERC721 token standard. \r\n                <br />\r\n                <br /> \r\n                A new contract has been created at <b>0x48581d582fb10ee92bb82fb72d52b921b4ca49d4</b>. \r\n                <br />\r\n                <br />\r\n                The new contract follows the ERC721 standard with the ERC721URIStorage interface, <br />as well as images uploaded to IPFS.\r\n                <br />  <br />\r\n                Everyone that held crypto runes until the creation of the new contract,<br /> got airdropped new runes for free. \r\n              \r\n              </p>\r\n     \r\n              <br/>\r\n              Go back to the <Link to=\"/details\">details page</Link>\r\n              <br/>\r\n              <br/>\r\n              Go back to the <Link to=\"/\">homepage</Link>\r\n              </div>\r\n              </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\" >\r\n          <section >\r\n          <div className=\"sk-folding-cube\">\r\n  <div className=\"sk-cube1 sk-cube\"></div>\r\n  <div className=\"sk-cube2 sk-cube\"></div>\r\n  <div className=\"sk-cube4 sk-cube\"></div>\r\n  <div className=\"sk-cube3 sk-cube\"></div>\r\n</div>\r\n          </section>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default More;\r\n","import React from \"react\";\r\nimport {  Route, Switch,HashRouter} from \"react-router-dom\";\r\n\r\nimport MarketPlaceHome from './MarketPlaceHome';\r\nimport MyRunes from './MyRunes';\r\nimport ClaimedRunes from './ClaimedRunes';\r\nimport RuneDetail from './RuneDetail';\r\nimport RuneDetailTemp from './RuneDetailTemp';\r\n\r\nimport Details from './Details';\r\nimport More from './More';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n      <Switch>\r\n        <Route exact  path=\"/\" component={MarketPlaceHome} />\r\n        <Route path=\"/details\" component={Details} />\r\n        <Route path=\"/more\" component={More} />\r\n\r\n      <Route\r\n        render={function() {\r\n          return    <div className=\"sk-folding-cube\">\r\n          <div className=\"sk-cube1 sk-cube\"></div>\r\n          <div className=\"sk-cube2 sk-cube\"></div>\r\n          <div className=\"sk-cube4 sk-cube\"></div>\r\n          <div className=\"sk-cube3 sk-cube\"></div>\r\n        </div>\r\n          ;\r\n        }}\r\n      />\r\n    </Switch></HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"../node_modules/react\";\r\nimport \"./App.css\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter as Router } from \"../node_modules/react-router-dom\";\r\nimport Routes from \"./Routes\";\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n     \r\n\r\n      <Router>\r\n      <div>\r\n        <main>\r\n        <Routes />\r\n        </main>\r\n      </div>\r\n      </Router>\r\n    \r\n\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}